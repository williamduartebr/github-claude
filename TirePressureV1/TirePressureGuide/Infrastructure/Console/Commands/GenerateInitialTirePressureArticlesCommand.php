<?php

namespace Src\ContentGeneration\TirePressureGuide\Infrastructure\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Collection;
use Src\ContentGeneration\TirePressureGuide\Application\UseCases\GenerateInitialArticlesUseCase;
use Src\ContentGeneration\TirePressureGuide\Infrastructure\Services\VehicleDataProcessorService;
use Src\ContentGeneration\TirePressureGuide\Infrastructure\Services\InitialArticleGeneratorService;
use Src\ContentGeneration\TirePressureGuide\Domain\Entities\TirePressureArticle;

/**
 * Command para gera√ß√£o inicial de artigos de calibragem (Etapa 1)
 * 
 * Processa CSV de ve√≠culos e gera artigos completos na TirePressureArticle
 * Similar ao sistema atual, mas persistindo direto na model MongoDB
 */
class GenerateInitialTirePressureArticlesCommand extends Command
{
    protected $signature = 'tire-pressure:generate-initial 
                           {--csv-path=data/todos_veiculos.csv : Caminho para o CSV de ve√≠culos}
                           {--batch-size=50 : N√∫mero de artigos por lote}
                           {--filter-make= : Filtrar por marca espec√≠fica}
                           {--filter-category= : Filtrar por categoria}
                           {--filter-vehicle-type= : Filtrar por tipo de ve√≠culo}
                           {--year-from= : Ano inicial para filtro}
                           {--year-to= : Ano final para filtro}
                           {--overwrite : Sobrescrever artigos existentes}
                           {--dry-run : Simular execu√ß√£o sem persistir}
                           {--show-progress : Mostrar barra de progresso}
                           {--batch-id= : ID personalizado para o lote}';

    protected $description = 'Gera artigos iniciais de calibragem de pneus a partir de CSV (Etapa 1)';

    protected VehicleDataProcessorService $vehicleProcessor;
    protected InitialArticleGeneratorService $articleGenerator;
    protected GenerateInitialArticlesUseCase $generateUseCase;

    public function __construct(
        VehicleDataProcessorService $vehicleProcessor,
        InitialArticleGeneratorService $articleGenerator,
        GenerateInitialArticlesUseCase $generateUseCase
    ) {
        parent::__construct();
        $this->vehicleProcessor = $vehicleProcessor;
        $this->articleGenerator = $articleGenerator;
        $this->generateUseCase = $generateUseCase;
    }

    public function handle(): int
    {
        try {
            $this->info("üöÄ INICIANDO GERA√á√ÉO DE ARTIGOS - TIRE PRESSURE GUIDE (ETAPA 1)");
            $this->line("=================================================================");

            // 1. Obter configura√ß√£o
            $config = $this->getConfiguration();

            // 2. Validar ambiente
            $this->validateEnvironment($config);

            // 3. Exibir configura√ß√£o
            $this->displayConfiguration($config);

            if (!$this->confirm('Deseja continuar com a gera√ß√£o?')) {
                $this->info("‚ùå Opera√ß√£o cancelada pelo usu√°rio.");
                return 0;
            }

            // 4. Carregar e processar ve√≠culos
            $vehicles = $this->loadAndFilterVehicles($config);

            if ($vehicles->isEmpty()) {
                $this->warn("‚ö†Ô∏è Nenhum ve√≠culo encontrado com os filtros aplicados.");
                return 1;
            }

            // 5. Preparar ambiente
            // $this->prepareEnvironment();

            // 6. Processar em lotes
            $results = $this->processVehiclesInBatches($vehicles, $config);

            // 7. Mostrar relat√≥rio final
            $this->displayFinalReport($results);

            $this->info("‚úÖ Gera√ß√£o de artigos conclu√≠da com sucesso!");
            return 0;

        } catch (\Exception $e) {
            $this->error("‚ùå Erro durante gera√ß√£o: " . $e->getMessage());
            Log::error("GenerateInitialTirePressureArticlesCommand falhou: " . $e->getMessage(), [
                'trace' => $e->getTraceAsString()
            ]);
            return 1;
        }
    }

    /**
     * Obter configura√ß√£o do comando
     */
    protected function getConfiguration(): array
    {
        return [
            'csv_path' => $this->option('csv-path'),
            'batch_size' => (int) $this->option('batch-size'),
            'filters' => [
                'make' => $this->option('filter-make'),
                'category' => $this->option('filter-category'),
                'vehicle_type' => $this->option('filter-vehicle-type'),
                'year_from' => $this->option('year-from') ? (int) $this->option('year-from') : null,
                'year_to' => $this->option('year-to') ? (int) $this->option('year-to') : null,
                'require_tire_pressure' => true
            ],
            'overwrite' => $this->option('overwrite'),
            'dry_run' => $this->option('dry-run'),
            'show_progress' => $this->option('show-progress'),
            'batch_id' => $this->option('batch-id') ?? 'batch_' . date('Ymd_His')
        ];
    }

    /**
     * Validar ambiente antes da execu√ß√£o
     */
    protected function validateEnvironment(array $config): void
    {
        // Verificar se CSV existe
        if (!file_exists($config['csv_path'])) {
            throw new \Exception("Arquivo CSV n√£o encontrado: {$config['csv_path']}");
        }

        // Verificar conex√£o MongoDB
        try {
            TirePressureArticle::raw(function($collection) {
                return $collection->findOne();
            });
        } catch (\Exception $e) {
            throw new \Exception("Erro de conex√£o MongoDB: " . $e->getMessage());
        }

        // Verificar mem√≥ria dispon√≠vel
        $memoryLimit = ini_get('memory_limit');
        $this->line("üíæ Limite de mem√≥ria: {$memoryLimit}");

        if ($this->convertToBytes($memoryLimit) < 512 * 1024 * 1024) { // 512MB
            $this->warn("‚ö†Ô∏è Limite de mem√≥ria baixo. Recomendado: 512MB ou mais");
        }
    }

    /**
     * Exibir configura√ß√£o do processamento
     */
    protected function displayConfiguration(array $config): void
    {
        $this->info("üìã CONFIGURA√á√ÉO:");
        $this->line("   üìÇ CSV: {$config['csv_path']}");
        $this->line("   üì¶ Lote: {$config['batch_size']} artigos");
        $this->line("   üÜî Batch ID: {$config['batch_id']}");

        if (!empty(array_filter($config['filters']))) {
            $this->line("   üîç Filtros ativos:");
            foreach ($config['filters'] as $key => $value) {
                if ($value !== null && $key !== 'require_tire_pressure') {
                    $this->line("      {$key}: {$value}");
                }
            }
        }

        $options = [];
        if ($config['overwrite']) $options[] = 'Sobrescrever';
        if ($config['dry_run']) $options[] = 'Simula√ß√£o';

        if (!empty($options)) {
            $this->line("   ‚öôÔ∏è Op√ß√µes: " . implode(', ', $options));
        }
    }

    /**
     * Carregar e filtrar ve√≠culos do CSV
     */
    protected function loadAndFilterVehicles(array $config): Collection
    {
        $this->info("üì• Carregando ve√≠culos do CSV...");

        $vehicles = $this->vehicleProcessor->loadFromCsv($config['csv_path']);
        $this->line("   Total carregados: " . $vehicles->count());

        // Aplicar filtros
        if (!empty(array_filter($config['filters']))) {
            $this->info("üîç Aplicando filtros...");
            $vehicles = $this->vehicleProcessor->applyFilters($vehicles, $config['filters']);
            $this->line("   Ap√≥s filtros: " . $vehicles->count());
        }

        // Remover duplicatas
        $vehicles = $this->vehicleProcessor->removeDuplicates($vehicles);
        $this->line("   √önicos: " . $vehicles->count());

        // Validar dados essenciais
        $validVehicles = $this->vehicleProcessor->validateVehicleData($vehicles);
        $this->line("   V√°lidos: " . $validVehicles->count());

        if ($vehicles->count() !== $validVehicles->count()) {
            $this->warn("‚ö†Ô∏è " . ($vehicles->count() - $validVehicles->count()) . " ve√≠culos removidos por dados inv√°lidos");
        }

        // Verificar artigos existentes (se n√£o for sobrescrever)
        if (!$config['overwrite']) {
            $newVehicles = $this->filterExistingArticles($validVehicles);
            $this->line("   Novos (n√£o existentes): " . $newVehicles->count());
            return $newVehicles;
        }

        return $validVehicles;
    }

    /**
     * Filtrar ve√≠culos que j√° possuem artigos
     */
    protected function filterExistingArticles(Collection $vehicles): Collection
    {
        $this->info("üîç Verificando artigos existentes...");

        $existingSlugs = TirePressureArticle::pluck('wordpress_slug')->toArray();
        $existingSlugsSet = array_flip($existingSlugs);

        return $vehicles->filter(function ($vehicle) use ($existingSlugsSet) {
            $slug = $this->generateSlugForVehicle($vehicle);
            return !isset($existingSlugsSet[$slug]);
        });
    }

    /**
     * Gerar slug para ve√≠culo (sem persistir)
     */
    protected function generateSlugForVehicle(array $vehicle): string
    {
        $make = $this->slugify($vehicle['make']);
        $model = $this->slugify($vehicle['model']);
        $year = $vehicle['year'];
        
        return "calibragem-pneu-{$make}-{$model}-{$year}";
    }

    /**
     * Converter string para slug
     */
    protected function slugify(string $text): string
    {
        // Remover acentos
        $text = $this->removeAccents($text);
        
        // Converter para min√∫sculas
        $text = strtolower($text);
        
        // Remover caracteres especiais e substituir por h√≠fen
        $text = preg_replace('/[^a-z0-9\-_]/', '-', $text);
        
        // Remover h√≠fens m√∫ltiplos
        $text = preg_replace('/-+/', '-', $text);
        
        // Remover h√≠fens do in√≠cio e fim
        return trim($text, '-');
    }

    /**
     * Remover acentos
     */
    protected function removeAccents(string $text): string
    {
        $unwanted = [
            '√°' => 'a', '√†' => 'a', '√¢' => 'a', '√£' => 'a', '√§' => 'a', '√•' => 'a',
            '√©' => 'e', '√®' => 'e', '√™' => 'e', '√´' => 'e',
            '√≠' => 'i', '√¨' => 'i', '√Æ' => 'i', '√Ø' => 'i',
            '√≥' => 'o', '√≤' => 'o', '√¥' => 'o', '√µ' => 'o', '√∂' => 'o',
            '√∫' => 'u', '√π' => 'u', '√ª' => 'u', '√º' => 'u',
            '√Ω' => 'y', '√ø' => 'y', '√±' => 'n', '√ß' => 'c',
            '√Å' => 'A', '√Ä' => 'A', '√Ç' => 'A', '√É' => 'A', '√Ñ' => 'A', '√Ö' => 'A',
            '√â' => 'E', '√à' => 'E', '√ä' => 'E', '√ã' => 'E',
            '√ç' => 'I', '√å' => 'I', '√é' => 'I', '√è' => 'I',
            '√ì' => 'O', '√í' => 'O', '√î' => 'O', '√ï' => 'O', '√ñ' => 'O',
            '√ö' => 'U', '√ô' => 'U', '√õ' => 'U', '√ú' => 'U',
            '√ù' => 'Y', '√ë' => 'N', '√á' => 'C',
        ];

        return strtr($text, $unwanted);
    }

    /**
     * Preparar ambiente para processamento
     */
    protected function prepareEnvironment(): void
    {
        $this->info("üõ†Ô∏è Preparando ambiente...");

        // Aumentar limite de mem√≥ria se necess√°rio
        ini_set('memory_limit', '1G');
        
        // Aumentar tempo limite de execu√ß√£o
        set_time_limit(0);
        
        // Criar √≠ndices MongoDB se n√£o existirem
        try {
            TirePressureArticle::createIndexes();
            $this->line("   ‚úÖ √çndices MongoDB verificados");
        } catch (\Exception $e) {
            $this->warn("   ‚ö†Ô∏è Erro ao criar √≠ndices: " . $e->getMessage());
        }
    }

    /**
     * Processar ve√≠culos em lotes
     */
    protected function processVehiclesInBatches(Collection $vehicles, array $config): array
    {
        $totalVehicles = $vehicles->count();
        $batchSize = $config['batch_size'];
        $totalBatches = ceil($totalVehicles / $batchSize);

        $this->info("üîÑ Processando {$totalVehicles} ve√≠culos em {$totalBatches} lote(s)...");

        $results = [
            'total_vehicles' => $totalVehicles,
            'total_batches' => $totalBatches,
            'processed' => 0,
            'successful' => 0,
            'failed' => 0,
            'errors' => []
        ];

        $batches = $vehicles->chunk($batchSize);

        foreach ($batches as $batchIndex => $batch) {
            $batchNumber = $batchIndex + 1;
            $this->info("üì¶ Processando lote {$batchNumber}/{$totalBatches} ({$batch->count()} ve√≠culos)");

            $batchResults = $this->processBatch($batch, $config, $batchNumber);

            // Consolidar resultados
            $results['processed'] += $batchResults['processed'];
            $results['successful'] += $batchResults['successful'];
            $results['failed'] += $batchResults['failed'];
            $results['errors'] = array_merge($results['errors'], $batchResults['errors']);

            // Mostrar progresso do lote
            $this->line("   ‚úÖ Sucesso: {$batchResults['successful']}");
            if ($batchResults['failed'] > 0) {
                $this->line("   ‚ùå Falhas: {$batchResults['failed']}");
            }

            // Pausa entre lotes para n√£o sobrecarregar
            if ($batchNumber < $totalBatches) {
                sleep(1);
            }
        }

        return $results;
    }

    /**
     * Processar um lote espec√≠fico
     */
    protected function processBatch(Collection $batch, array $config, int $batchNumber): array
    {
        $results = [
            'processed' => 0,
            'successful' => 0,
            'failed' => 0,
            'errors' => []
        ];

        $progressBar = null;
        if ($config['show_progress']) {
            $progressBar = $this->output->createProgressBar($batch->count());
            $progressBar->start();
        }

        foreach ($batch as $vehicle) {
            $results['processed']++;

            try {
                // Usar o Use Case para gerar o artigo
                $success = $this->generateUseCase->execute(
                    $vehicle,
                    $config['batch_id'] . '_' . $batchNumber,
                    $config['dry_run']
                );

                if ($success) {
                    $results['successful']++;
                } else {
                    $results['failed']++;
                    $results['errors'][] = "Falha ao gerar artigo para {$vehicle['make']} {$vehicle['model']} {$vehicle['year']}";
                }

            } catch (\Exception $e) {
                $results['failed']++;
                $vehicleId = "{$vehicle['make']} {$vehicle['model']} {$vehicle['year']}";
                $error = "Erro ao processar {$vehicleId}: " . $e->getMessage();
                $results['errors'][] = $error;

                Log::error("Erro no processamento de ve√≠culo", [
                    'vehicle' => $vehicleId,
                    'error' => $e->getMessage(),
                    'trace' => $e->getTraceAsString()
                ]);
            }

            if ($progressBar) {
                $progressBar->advance();
            }
        }

        if ($progressBar) {
            $progressBar->finish();
            $this->newLine();
        }

        return $results;
    }

    /**
     * Exibir relat√≥rio final
     */
    protected function displayFinalReport(array $results): void
    {
        $this->newLine();
        $this->info("üìä RELAT√ìRIO FINAL:");
        $this->line("===================");
        
        $this->table([
            'M√©trica', 'Valor'
        ], [
            ['Ve√≠culos processados', $results['processed']],
            ['Artigos gerados com sucesso', $results['successful']],
            ['Falhas', $results['failed']],
            ['Taxa de sucesso', $this->calculateSuccessRate($results) . '%'],
            ['Total de lotes', $results['total_batches']]
        ]);

        // Mostrar erros se houver
        if (!empty($results['errors'])) {
            $this->error("‚ùå ERROS ENCONTRADOS:");
            foreach (array_slice($results['errors'], 0, 10) as $error) {
                $this->line("   ‚Ä¢ {$error}");
            }
            
            if (count($results['errors']) > 10) {
                $remaining = count($results['errors']) - 10;
                $this->line("   ... e mais {$remaining} erro(s). Verifique os logs para detalhes.");
            }
        }

        // Estat√≠sticas da base
        $this->newLine();
        $this->info("üìà ESTAT√çSTICAS DA BASE:");
        $stats = TirePressureArticle::getGenerationStatistics();
        
        $this->table([
            'Status', 'Quantidade'
        ], [
            ['Total de artigos', $stats['total']],
            ['Pendentes', $stats['pending']],
            ['Gerados (Etapa 1)', $stats['generated']],
            ['Refinados Claude (Etapa 2)', $stats['claude_enhanced']],
            ['Publicados', $stats['published']],
            ['Prontos para Claude', $stats['ready_for_claude']]
        ]);
    }

    /**
     * Calcular taxa de sucesso
     */
    protected function calculateSuccessRate(array $results): float
    {
        if ($results['processed'] === 0) {
            return 0;
        }
        
        return round(($results['successful'] / $results['processed']) * 100, 2);
    }

    /**
     * Converter string de mem√≥ria para bytes
     */
    protected function convertToBytes(string $memoryLimit): int
    {
        $memoryLimit = trim($memoryLimit);
        $last = strtolower($memoryLimit[strlen($memoryLimit) - 1]);
        $number = (int) $memoryLimit;

        switch ($last) {
            case 'g':
                $number *= 1024;
            case 'm':
                $number *= 1024;
            case 'k':
                $number *= 1024;
        }

        return $number;
    }
}