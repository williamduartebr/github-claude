<?php

namespace Src\ContentGeneration\ReviewSchedule\Console;

use Illuminate\Console\Command;
use Src\AutoInfoCenter\Domain\Eloquent\Article;

class FixHybridDetailedScheduleCommand extends Command
{
    protected $signature = 'review-schedule:fix-hybrid-detailed {--limit=100 : Limite de artigos} {--force : Executar sem confirma√ß√£o}';
    protected $description = 'Corrige cronograma detalhado dos artigos de ve√≠culos h√≠bridos';

    public function handle(): int
    {
        $limit = $this->option('limit');
        $force = $this->option('force');

        // Buscar artigos de h√≠bridos com problema
        $articles = Article::where('template', 'review_schedule_hybrid')
            ->limit($limit)
            ->get();

        if ($articles->isEmpty()) {
            $this->info('‚úÖ Nenhum artigo h√≠brido encontrado para corre√ß√£o.');
            return self::SUCCESS;
        }

        $this->info("üîç Encontrados {$articles->count()} artigos h√≠bridos para an√°lise.");

        // Analisar problemas
        $problemArticles = [];
        foreach ($articles as $article) {
            if ($this->hasIncorrectSchedule($article)) {
                $problemArticles[] = $article;
            }
        }

        if (empty($problemArticles)) {
            $this->info('‚úÖ Todos os cronogramas h√≠bridos est√£o corretos.');
            return self::SUCCESS;
        }

        $this->warn("‚ö†Ô∏è  " . count($problemArticles) . " artigos h√≠bridos precisam de corre√ß√£o!");

        if (!$force && !$this->confirm('Deseja corrigir os cronogramas detalhados dos h√≠bridos?')) {
            $this->info('Opera√ß√£o cancelada.');
            return self::SUCCESS;
        }

        return $this->fixArticles($problemArticles);
    }

    private function hasIncorrectSchedule(Article $article): bool
    {
        $content = $article->content;
        
        if (empty($content['cronograma_detalhado'])) {
            return true;
        }

        // Verificar se tem cronogramas id√™nticos (problema comum)
        $schedules = $content['cronograma_detalhado'];
        if (count($schedules) >= 2) {
            $firstServices = implode('|', $schedules[0]['servicos_principais'] ?? []);
            $duplicateCount = 0;
            
            foreach ($schedules as $schedule) {
                $currentServices = implode('|', $schedule['servicos_principais'] ?? []);
                if ($firstServices === $currentServices) {
                    $duplicateCount++;
                }
            }
            
            // Se mais de 3 revis√µes s√£o id√™nticas, h√° problema
            if ($duplicateCount > 3) {
                return true;
            }
        }

        // Verificar se tem servi√ßos inadequados para h√≠brido
        foreach ($content['cronograma_detalhado'] as $revision) {
            $services = implode(' ', $revision['servicos_principais'] ?? []);
            
            // Indicadores de conte√∫do inadequado para h√≠brido
            if (str_contains($services, 'ar-condicionado') ||
                str_contains($services, 'Diagn√≥stico b√°sico dos sistemas el√©tricos') ||
                (!str_contains($services, 'h√≠brido') && !str_contains($services, 'bateria') && !str_contains($services, 'regenerativo'))) {
                return true;
            }
        }

        return false;
    }

    private function fixArticles(array $articles): int
    {
        $fixed = 0;
        $errors = 0;

        $progressBar = $this->output->createProgressBar(count($articles));
        $progressBar->start();

        foreach ($articles as $article) {
            try {
                $this->fixHybridSchedule($article);
                $fixed++;
            } catch (\Exception $e) {
                $errors++;
                $this->error("\nErro ao corrigir {$article->slug}: " . $e->getMessage());
            }
            $progressBar->advance();
        }

        $progressBar->finish();
        $this->newLine(2);

        $this->info("‚úÖ Corre√ß√£o conclu√≠da!");
        $this->info("üìä Artigos h√≠bridos corrigidos: {$fixed}");
        
        if ($errors > 0) {
            $this->warn("‚ö†Ô∏è  Erros: {$errors}");
        }

        return self::SUCCESS;
    }

    private function fixHybridSchedule(Article $article): void
    {
        $content = $article->content;
        $vehicleData = $article->extracted_entities ?? [];

        // Gerar cronograma correto para h√≠brido
        $content['cronograma_detalhado'] = $this->generateCorrectHybridSchedule($vehicleData);

        $article->content = $content;
        $article->save();
    }

    private function generateCorrectHybridSchedule(array $vehicleData): array
    {
        $make = strtolower($vehicleData['marca'] ?? '');
        $model = strtolower($vehicleData['modelo'] ?? '');

        $revisions = [
            [
                'numero_revisao' => 1,
                'intervalo' => '10.000 km ou 12 meses',
                'km' => '10.000',
                'servicos_principais' => [
                    'Troca de √≥leo motor h√≠brido (0W20 sint√©tico)',
                    'Verifica√ß√£o inicial da bateria h√≠brida',
                    'Diagn√≥stico do sistema h√≠brido completo',
                    'Calibra√ß√£o dos freios regenerativos'
                ],
                'verificacoes_complementares' => [
                    'Verifica√ß√£o da press√£o dos pneus',
                    'Teste do sistema de alta voltagem',
                    'Inspe√ß√£o dos conectores h√≠bridos',
                    'Verifica√ß√£o dos modos de condu√ß√£o'
                ],
                'estimativa_custo' => $this->getCostForRevision(1, $make),
                'observacoes' => 'Primeira revis√£o com foco na adapta√ß√£o do sistema h√≠brido'
            ],
            [
                'numero_revisao' => 2,
                'intervalo' => '20.000 km ou 24 meses',
                'km' => '20.000',
                'servicos_principais' => [
                    'Troca de √≥leo e filtro do motor h√≠brido',
                    'Diagn√≥stico da bateria de alta tens√£o',
                    'Verifica√ß√£o do sistema de arrefecimento duplo',
                    'Inspe√ß√£o dos freios regenerativos'
                ],
                'verificacoes_complementares' => [
                    'An√°lise da efici√™ncia energ√©tica',
                    'Teste do conversor DC-DC',
                    'Verifica√ß√£o do sistema de escape',
                    'Inspe√ß√£o da transmiss√£o e-CVT'
                ],
                'estimativa_custo' => $this->getCostForRevision(2, $make),
                'observacoes' => 'Manuten√ß√£o dos sistemas de propuls√£o dual'
            ],
            [
                'numero_revisao' => 3,
                'intervalo' => '30.000 km ou 36 meses',
                'km' => '30.000',
                'servicos_principais' => [
                    'Troca de √≥leo espec√≠fico para h√≠bridos',
                    'Limpeza do sistema de inje√ß√£o otimizado',
                    'Calibra√ß√£o da unidade de controle h√≠brida',
                    'Verifica√ß√£o do sistema t√©rmico avan√ßado'
                ],
                'verificacoes_complementares' => [
                    'An√°lise da degrada√ß√£o da bateria',
                    'Teste de autonomia em modo el√©trico',
                    'Verifica√ß√£o das soldas de alta voltagem',
                    'Inspe√ß√£o do sistema de climatiza√ß√£o'
                ],
                'estimativa_custo' => $this->getCostForRevision(3, $make),
                'observacoes' => 'Manuten√ß√£o preventiva intermedi√°ria h√≠brida'
            ],
            [
                'numero_revisao' => 4,
                'intervalo' => '40.000 km ou 48 meses',
                'km' => '40.000',
                'servicos_principais' => [
                    'Troca de √≥leo e an√°lise da viscosidade',
                    'Substitui√ß√£o do filtro de ar de alta efici√™ncia',
                    'Verifica√ß√£o completa da transmiss√£o h√≠brida',
                    'Atualiza√ß√£o de software do sistema'
                ],
                'verificacoes_complementares' => [
                    'Diagn√≥stico de c√≥digos de erro h√≠bridos',
                    'Teste de performance do motor el√©trico',
                    'Verifica√ß√£o de vazamentos no sistema',
                    'Inspe√ß√£o de cabos de alta voltagem'
                ],
                'estimativa_custo' => $this->getCostForRevision(4, $make),
                'observacoes' => 'Revis√£o ampla com atualiza√ß√£o tecnol√≥gica'
            ],
            [
                'numero_revisao' => 5,
                'intervalo' => '50.000 km ou 60 meses',
                'km' => '50.000',
                'servicos_principais' => [
                    'Troca de √≥leo com aditivos especiais',
                    'Manuten√ß√£o do sistema de arrefecimento h√≠brido',
                    'Verifica√ß√£o da eletr√¥nica de pot√™ncia',
                    'Teste de efici√™ncia energ√©tica completo'
                ],
                'verificacoes_complementares' => [
                    'An√°lise t√©rmica da bateria h√≠brida',
                    'Verifica√ß√£o do isolamento el√©trico',
                    'Teste de todos os sensores h√≠bridos',
                    'Calibra√ß√£o dos sistemas de assist√™ncia'
                ],
                'estimativa_custo' => $this->getCostForRevision(5, $make),
                'observacoes' => 'Verifica√ß√£o avan√ßada dos sistemas cr√≠ticos'
            ],
            [
                'numero_revisao' => 6,
                'intervalo' => '60.000 km ou 72 meses',
                'km' => '60.000',
                'servicos_principais' => [
                    'Troca de √≥leo e todos os filtros h√≠bridos',
                    'Revis√£o completa da transmiss√£o e-CVT',
                    'Manuten√ß√£o avan√ßada da bateria h√≠brida',
                    'Otimiza√ß√£o completa do sistema h√≠brido'
                ],
                'verificacoes_complementares' => [
                    'Teste de capacidade total da bateria',
                    'Verifica√ß√£o estrutural do ve√≠culo',
                    'An√°lise de desgaste dos componentes',
                    'Avalia√ß√£o da vida √∫til restante'
                ],
                'estimativa_custo' => $this->getCostForRevision(6, $make),
                'observacoes' => 'Revis√£o extensiva para m√°xima longevidade h√≠brida'
            ]
        ];

        return $revisions;
    }

    private function getCostForRevision(int $revision, string $make): string
    {
        $baseCosts = [
            1 => ['min' => 500, 'max' => 650],
            2 => ['min' => 650, 'max' => 850],
            3 => ['min' => 800, 'max' => 1100],
            4 => ['min' => 950, 'max' => 1300],
            5 => ['min' => 750, 'max' => 1050],
            6 => ['min' => 1200, 'max' => 1800]
        ];

        // Ajustar por marca (premium vs popular)
        $premiumBrands = ['lexus', 'bmw', 'mercedes', 'audi', 'infiniti', 'acura'];
        $multiplier = in_array($make, $premiumBrands) ? 1.4 : 1.0;

        $min = (int)($baseCosts[$revision]['min'] * $multiplier);
        $max = (int)($baseCosts[$revision]['max'] * $multiplier);

        return "R$ {$min} - R$ {$max}";
    }
}