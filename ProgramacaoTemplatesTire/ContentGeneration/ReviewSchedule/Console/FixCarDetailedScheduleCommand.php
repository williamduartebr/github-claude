<?php

namespace Src\ContentGeneration\ReviewSchedule\Console;


use Illuminate\Console\Command;
use Src\AutoInfoCenter\Domain\Eloquent\Article;

class FixCarDetailedScheduleCommand extends Command
{
    protected $signature = 'review-schedule:fix-car-detailed {--limit=100 : Limite de artigos} {--force : Executar sem confirma√ß√£o}';
    protected $description = 'Corrige cronograma detalhado dos artigos de carros convencionais';

    public function handle(): int
    {
        $limit = $this->option('limit');
        $force = $this->option('force');

        // Buscar artigos de carros com problema
        $articles = Article::where('template', 'review_schedule_car')
            ->limit($limit)
            ->get();

        if ($articles->isEmpty()) {
            $this->info('‚úÖ Nenhum artigo de carro encontrado para corre√ß√£o.');
            return self::SUCCESS;
        }

        $this->info("üîç Encontrados {$articles->count()} artigos de carros para an√°lise.");

        // Analisar problemas
        $problemArticles = [];
        foreach ($articles as $article) {
            if ($this->hasIncorrectSchedule($article)) {
                $problemArticles[] = $article;
            }
        }

        if (empty($problemArticles)) {
            $this->info('‚úÖ Todos os cronogramas de carros est√£o corretos.');
            return self::SUCCESS;
        }

        $this->warn("‚ö†Ô∏è  " . count($problemArticles) . " artigos de carros precisam de corre√ß√£o!");

        if (!$force && !$this->confirm('Deseja corrigir os cronogramas detalhados dos carros?')) {
            $this->info('Opera√ß√£o cancelada.');
            return self::SUCCESS;
        }

        return $this->fixArticles($problemArticles);
    }

    private function hasIncorrectSchedule(Article $article): bool
    {
        $content = $article->content;
        
        if (empty($content['cronograma_detalhado'])) {
            return true;
        }

        // Verificar se tem cronogramas id√™nticos (problema comum)
        $schedules = $content['cronograma_detalhado'];
        if (count($schedules) >= 2) {
            $firstServices = implode('|', $schedules[0]['servicos_principais'] ?? []);
            $duplicateCount = 0;
            
            foreach ($schedules as $schedule) {
                $currentServices = implode('|', $schedule['servicos_principais'] ?? []);
                if ($firstServices === $currentServices) {
                    $duplicateCount++;
                }
            }
            
            // Se mais de 3 revis√µes s√£o id√™nticas, h√° problema
            if ($duplicateCount > 3) {
                return true;
            }
        }

        // Verificar se tem servi√ßos muito gen√©ricos
        foreach ($content['cronograma_detalhado'] as $revision) {
            $services = implode(' ', $revision['servicos_principais'] ?? []);
            
            // Indicadores de conte√∫do gen√©rico demais
            if (str_contains($services, 'Verifica√ß√£o minuciosa') ||
                str_contains($services, 'Diagn√≥stico b√°sico') ||
                str_contains($services, 'Inspe√ß√£o detalhada dos pneum√°ticos')) {
                return true;
            }
        }

        return false;
    }

    private function fixArticles(array $articles): int
    {
        $fixed = 0;
        $errors = 0;

        $progressBar = $this->output->createProgressBar(count($articles));
        $progressBar->start();

        foreach ($articles as $article) {
            try {
                $this->fixCarSchedule($article);
                $fixed++;
            } catch (\Exception $e) {
                $errors++;
                $this->error("\nErro ao corrigir {$article->slug}: " . $e->getMessage());
            }
            $progressBar->advance();
        }

        $progressBar->finish();
        $this->newLine(2);

        $this->info("‚úÖ Corre√ß√£o conclu√≠da!");
        $this->info("üìä Artigos de carros corrigidos: {$fixed}");
        
        if ($errors > 0) {
            $this->warn("‚ö†Ô∏è  Erros: {$errors}");
        }

        return self::SUCCESS;
    }

    private function fixCarSchedule(Article $article): void
    {
        $content = $article->content;
        $vehicleData = $article->extracted_entities ?? [];

        // Gerar cronograma correto para carro
        $content['cronograma_detalhado'] = $this->generateCorrectCarSchedule($vehicleData);

        $article->content = $content;
        $article->save();
    }

    private function generateCorrectCarSchedule(array $vehicleData): array
    {
        $make = strtolower($vehicleData['marca'] ?? '');
        $model = strtolower($vehicleData['modelo'] ?? '');
        $year = $vehicleData['ano'] ?? date('Y');

        $revisions = [
            [
                'numero_revisao' => 1,
                'intervalo' => '10.000 km ou 12 meses',
                'km' => '10.000',
                'servicos_principais' => [
                    'Troca de √≥leo e filtro do motor',
                    'Verifica√ß√£o dos sistemas de freios',
                    'Inspe√ß√£o dos filtros de ar e combust√≠vel',
                    'Diagn√≥stico dos sistemas b√°sicos'
                ],
                'verificacoes_complementares' => [
                    'Verifica√ß√£o da press√£o dos pneus',
                    'Teste da bateria e sistema de carga',
                    'Inspe√ß√£o do sistema de ilumina√ß√£o',
                    'Verifica√ß√£o dos n√≠veis de fluidos'
                ],
                'estimativa_custo' => $this->getCostForRevision(1, $make),
                'observacoes' => 'Primeira revis√£o com verifica√ß√µes b√°sicas'
            ],
            [
                'numero_revisao' => 2,
                'intervalo' => '20.000 km ou 24 meses',
                'km' => '20.000',
                'servicos_principais' => [
                    'Troca de √≥leo e filtro do motor',
                    'Substitui√ß√£o dos filtros de ar e combust√≠vel',
                    'Verifica√ß√£o do sistema de arrefecimento',
                    'Inspe√ß√£o das pastilhas de freio'
                ],
                'verificacoes_complementares' => [
                    'Verifica√ß√£o do sistema de escape',
                    'Teste do sistema de inje√ß√£o',
                    'Inspe√ß√£o das correias auxiliares',
                    'Verifica√ß√£o da suspens√£o'
                ],
                'estimativa_custo' => $this->getCostForRevision(2, $make),
                'observacoes' => 'Manuten√ß√£o dos sistemas de filtra√ß√£o e freios'
            ],
            [
                'numero_revisao' => 3,
                'intervalo' => '30.000 km ou 36 meses',
                'km' => '30.000',
                'servicos_principais' => [
                    'Troca de √≥leo e filtro do motor',
                    'Limpeza do sistema de inje√ß√£o',
                    'Verifica√ß√£o da embreagem (c√¢mbio manual)',
                    'Troca do fluido de freio'
                ],
                'verificacoes_complementares' => [
                    'An√°lise do sistema el√©trico completo',
                    'Verifica√ß√£o da dire√ß√£o hidr√°ulica',
                    'Inspe√ß√£o do sistema de climatiza√ß√£o',
                    'Teste de alinhamento e balanceamento'
                ],
                'estimativa_custo' => $this->getCostForRevision(3, $make),
                'observacoes' => 'Manuten√ß√£o preventiva intermedi√°ria'
            ],
            [
                'numero_revisao' => 4,
                'intervalo' => '40.000 km ou 48 meses',
                'km' => '40.000',
                'servicos_principais' => [
                    'Troca de √≥leo e filtro do motor',
                    'Substitui√ß√£o das velas de igni√ß√£o',
                    'Verifica√ß√£o das correias do motor',
                    'Inspe√ß√£o do sistema de transmiss√£o'
                ],
                'verificacoes_complementares' => [
                    'Teste do sistema de igni√ß√£o completo',
                    'Verifica√ß√£o dos amortecedores',
                    'Inspe√ß√£o dos terminais de dire√ß√£o',
                    'An√°lise do sistema de escape'
                ],
                'estimativa_custo' => $this->getCostForRevision(4, $make),
                'observacoes' => 'Revis√£o com foco em igni√ß√£o e transmiss√£o'
            ],
            [
                'numero_revisao' => 5,
                'intervalo' => '50.000 km ou 60 meses',
                'km' => '50.000',
                'servicos_principais' => [
                    'Troca de √≥leo e filtro do motor',
                    'Manuten√ß√£o do sistema de arrefecimento',
                    'Verifica√ß√£o da dire√ß√£o e suspens√£o',
                    'Inspe√ß√£o das pastilhas e discos de freio'
                ],
                'verificacoes_complementares' => [
                    'Teste do sistema de ar-condicionado',
                    'Verifica√ß√£o da bomba de combust√≠vel',
                    'Inspe√ß√£o dos sensores do motor',
                    'An√°lise de desgaste dos pneus'
                ],
                'estimativa_custo' => $this->getCostForRevision(5, $make),
                'observacoes' => 'Manuten√ß√£o dos sistemas de conforto e dire√ß√£o'
            ],
            [
                'numero_revisao' => 6,
                'intervalo' => '60.000 km ou 72 meses',
                'km' => '60.000',
                'servicos_principais' => [
                    'Troca de √≥leo e filtro do motor',
                    'Substitui√ß√£o da correia dentada',
                    'Revis√£o completa dos freios',
                    'Manuten√ß√£o geral dos fluidos'
                ],
                'verificacoes_complementares' => [
                    'Inspe√ß√£o estrutural completa',
                    'Verifica√ß√£o de todos os sistemas eletr√¥nicos',
                    'Teste de performance do motor',
                    'Avalia√ß√£o geral do ve√≠culo'
                ],
                'estimativa_custo' => $this->getCostForRevision(6, $make),
                'observacoes' => 'Revis√£o extensiva para m√°xima durabilidade'
            ]
        ];

        return $revisions;
    }

    private function getCostForRevision(int $revision, string $make): string
    {
        $baseCosts = [
            1 => ['min' => 280, 'max' => 380],
            2 => ['min' => 350, 'max' => 480],
            3 => ['min' => 450, 'max' => 650],
            4 => ['min' => 550, 'max' => 750],
            5 => ['min' => 600, 'max' => 850],
            6 => ['min' => 750, 'max' => 1200]
        ];

        // Ajustar por marca (premium vs popular)
        $premiumBrands = ['bmw', 'mercedes', 'audi', 'lexus', 'volvo', 'jaguar', 'land rover'];
        $popularBrands = ['chevrolet', 'ford', 'fiat', 'renault', 'volkswagen', 'hyundai'];
        
        $multiplier = 1.0;
        if (in_array($make, $premiumBrands)) {
            $multiplier = 1.5;
        } elseif (in_array($make, $popularBrands)) {
            $multiplier = 0.8;
        }

        $min = (int)($baseCosts[$revision]['min'] * $multiplier);
        $max = (int)($baseCosts[$revision]['max'] * $multiplier);

        return "R$ {$min} - R$ {$max}";
    }
}