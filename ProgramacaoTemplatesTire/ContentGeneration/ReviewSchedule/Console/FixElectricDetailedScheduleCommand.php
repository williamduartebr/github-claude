<?php

namespace Src\ContentGeneration\ReviewSchedule\Console;


use Illuminate\Console\Command;
use Src\AutoInfoCenter\Domain\Eloquent\Article;

class FixElectricDetailedScheduleCommand extends Command
{
    protected $signature = 'review-schedule:fix-electric-detailed {--limit=100 : Limite de artigos} {--force : Executar sem confirma√ß√£o}';
    protected $description = 'Corrige cronograma detalhado dos artigos de ve√≠culos el√©tricos';

    public function handle(): int
    {
        $limit = $this->option('limit');
        $force = $this->option('force');

        // Buscar artigos de el√©tricos com problema
        $articles = Article::where('template', 'review_schedule_electric')
            ->where('status', 'published')
            ->limit($limit)
            ->get();

        if ($articles->isEmpty()) {
            $this->info('‚úÖ Nenhum artigo el√©trico encontrado para corre√ß√£o.');
            return self::SUCCESS;
        }

        $this->info("üîç Encontrados {$articles->count()} artigos el√©tricos para an√°lise.");

        // Analisar problemas
        $problemArticles = [];
        foreach ($articles as $article) {
            if ($this->hasIncorrectSchedule($article)) {
                $problemArticles[] = $article;
            }
        }

        if (empty($problemArticles)) {
            $this->info('‚úÖ Todos os cronogramas el√©tricos est√£o corretos.');
            return self::SUCCESS;
        }

        $this->warn("‚ö†Ô∏è  " . count($problemArticles) . " artigos el√©tricos precisam de corre√ß√£o!");

        if (!$force && !$this->confirm('Deseja corrigir os cronogramas detalhados dos el√©tricos?')) {
            $this->info('Opera√ß√£o cancelada.');
            return self::SUCCESS;
        }

        return $this->fixArticles($problemArticles);
    }

    private function hasIncorrectSchedule(Article $article): bool
    {
        $content = $article->content;
        
        if (empty($content['cronograma_detalhado'])) {
            return true;
        }

        // Verificar se tem servi√ßos IMPOSS√çVEIS para el√©tricos
        foreach ($content['cronograma_detalhado'] as $revision) {
            $services = implode(' ', $revision['servicos_principais'] ?? []);
            
            // Servi√ßos que N√ÉO existem em carros el√©tricos
            if (str_contains($services, '√≥leo') ||
                str_contains($services, 'combust√≠vel') ||
                str_contains($services, 'inje√ß√£o') ||
                str_contains($services, 'embreagem') ||
                str_contains($services, 'motor') ||
                str_contains($services, 'filtro do motor')) {
                return true;
            }
        }

        // Verificar cronogramas id√™nticos
        $schedules = $content['cronograma_detalhado'];
        if (count($schedules) >= 2) {
            $firstServices = implode('|', $schedules[0]['servicos_principais'] ?? []);
            $duplicateCount = 0;
            
            foreach ($schedules as $schedule) {
                $currentServices = implode('|', $schedule['servicos_principais'] ?? []);
                if ($firstServices === $currentServices) {
                    $duplicateCount++;
                }
            }
            
            if ($duplicateCount > 3) {
                return true;
            }
        }

        return false;
    }

    private function fixArticles(array $articles): int
    {
        $fixed = 0;
        $errors = 0;

        $progressBar = $this->output->createProgressBar(count($articles));
        $progressBar->start();

        foreach ($articles as $article) {
            try {
                $this->fixElectricSchedule($article);
                $fixed++;
            } catch (\Exception $e) {
                $errors++;
                $this->error("\nErro ao corrigir {$article->slug}: " . $e->getMessage());
            }
            $progressBar->advance();
        }

        $progressBar->finish();
        $this->newLine(2);

        $this->info("‚úÖ Corre√ß√£o conclu√≠da!");
        $this->info("üìä Artigos el√©tricos corrigidos: {$fixed}");
        
        if ($errors > 0) {
            $this->warn("‚ö†Ô∏è  Erros: {$errors}");
        }

        return self::SUCCESS;
    }

    private function fixElectricSchedule(Article $article): void
    {
        $content = $article->content;
        $vehicleData = $article->extracted_entities ?? [];

        // Gerar cronograma correto para el√©trico
        $content['cronograma_detalhado'] = $this->generateCorrectElectricSchedule($vehicleData);

        $article->content = $content;
        $article->save();
    }

    private function generateCorrectElectricSchedule(array $vehicleData): array
    {
        $make = strtolower($vehicleData['marca'] ?? '');
        $model = strtolower($vehicleData['modelo'] ?? '');

        $revisions = [
            [
                'numero_revisao' => 1,
                'intervalo' => '10.000 km ou 12 meses',
                'km' => '10.000',
                'servicos_principais' => [
                    'Diagn√≥stico inicial da bateria de alta tens√£o',
                    'Verifica√ß√£o dos sistemas de freios regenerativos',
                    'Inspe√ß√£o dos conectores de carregamento',
                    'Teste dos sistemas eletr√¥nicos b√°sicos'
                ],
                'verificacoes_complementares' => [
                    'Verifica√ß√£o da press√£o dos pneus',
                    'Teste do sistema de climatiza√ß√£o',
                    'Inspe√ß√£o do sistema de ilumina√ß√£o LED',
                    'Verifica√ß√£o da central eletr√¥nica'
                ],
                'estimativa_custo' => $this->getCostForRevision(1, $make),
                'observacoes' => 'Primeira verifica√ß√£o dos sistemas el√©tricos'
            ],
            [
                'numero_revisao' => 2,
                'intervalo' => '20.000 km ou 24 meses',
                'km' => '20.000',
                'servicos_principais' => [
                    'An√°lise da degrada√ß√£o da bateria',
                    'Calibra√ß√£o dos freios regenerativos',
                    'Limpeza dos conectores de alta tens√£o',
                    'Verifica√ß√£o do sistema de refrigera√ß√£o da bateria'
                ],
                'verificacoes_complementares' => [
                    'Teste de autonomia e efici√™ncia',
                    'Verifica√ß√£o do inversor de pot√™ncia',
                    'Inspe√ß√£o dos cabos de alta tens√£o',
                    'Atualiza√ß√£o de software dispon√≠vel'
                ],
                'estimativa_custo' => $this->getCostForRevision(2, $make),
                'observacoes' => 'Manuten√ß√£o dos sistemas de propuls√£o el√©trica'
            ],
            [
                'numero_revisao' => 3,
                'intervalo' => '30.000 km ou 36 meses',
                'km' => '30.000',
                'servicos_principais' => [
                    'Diagn√≥stico avan√ßado da bateria de tra√ß√£o',
                    'Verifica√ß√£o do sistema t√©rmico da bateria',
                    'Troca do fluido de freio',
                    'Inspe√ß√£o completa dos sistemas de alta tens√£o'
                ],
                'verificacoes_complementares' => [
                    'Teste de isolamento el√©trico',
                    'Verifica√ß√£o dos sensores de temperatura',
                    'Inspe√ß√£o do sistema de ar-condicionado',
                    'An√°lise dos dados de performance'
                ],
                'estimativa_custo' => $this->getCostForRevision(3, $make),
                'observacoes' => 'Manuten√ß√£o preventiva intermedi√°ria el√©trica'
            ],
            [
                'numero_revisao' => 4,
                'intervalo' => '40.000 km ou 48 meses',
                'km' => '40.000',
                'servicos_principais' => [
                    'Revis√£o completa do sistema de propuls√£o',
                    'Manuten√ß√£o do sistema de refrigera√ß√£o',
                    'Atualiza√ß√£o de software dos controladores',
                    'Verifica√ß√£o da eletr√¥nica de pot√™ncia'
                ],
                'verificacoes_complementares' => [
                    'Teste de capacidade total da bateria',
                    'Verifica√ß√£o dos conversores DC-DC',
                    'Inspe√ß√£o dos motores el√©tricos',
                    'An√°lise de efici√™ncia energ√©tica'
                ],
                'estimativa_custo' => $this->getCostForRevision(4, $make),
                'observacoes' => 'Revis√£o avan√ßada com foco na eletr√¥nica'
            ],
            [
                'numero_revisao' => 5,
                'intervalo' => '50.000 km ou 60 meses',
                'km' => '50.000',
                'servicos_principais' => [
                    'An√°lise completa da sa√∫de da bateria',
                    'Manuten√ß√£o dos sistemas auxiliares el√©tricos',
                    'Verifica√ß√£o dos sistemas de seguran√ßa',
                    'Teste de performance dos motores el√©tricos'
                ],
                'verificacoes_complementares' => [
                    'Inspe√ß√£o estrutural dos componentes',
                    'Verifica√ß√£o dos sistemas de prote√ß√£o',
                    'Teste de todos os sensores el√©tricos',
                    'Calibra√ß√£o dos sistemas de assist√™ncia'
                ],
                'estimativa_custo' => $this->getCostForRevision(5, $make),
                'observacoes' => 'Verifica√ß√£o completa dos sistemas cr√≠ticos'
            ],
            [
                'numero_revisao' => 6,
                'intervalo' => '60.000 km ou 72 meses',
                'km' => '60.000',
                'servicos_principais' => [
                    'Revis√£o extensiva da bateria de alta tens√£o',
                    'Manuten√ß√£o completa dos sistemas eletr√¥nicos',
                    'Otimiza√ß√£o de software e calibra√ß√µes',
                    'An√°lise de vida √∫til restante dos componentes'
                ],
                'verificacoes_complementares' => [
                    'Teste de capacidade e autonomia m√°ximas',
                    'Verifica√ß√£o de todos os sistemas de seguran√ßa',
                    'Inspe√ß√£o completa da estrutura el√©trica',
                    'Avalia√ß√£o geral do ve√≠culo el√©trico'
                ],
                'estimativa_custo' => $this->getCostForRevision(6, $make),
                'observacoes' => 'Revis√£o extensiva para m√°xima longevidade el√©trica'
            ]
        ];

        return $revisions;
    }

    private function getCostForRevision(int $revision, string $make): string
    {
        $baseCosts = [
            1 => ['min' => 350, 'max' => 500],
            2 => ['min' => 450, 'max' => 650],
            3 => ['min' => 600, 'max' => 850],
            4 => ['min' => 750, 'max' => 1100],
            5 => ['min' => 650, 'max' => 950],
            6 => ['min' => 900, 'max' => 1400]
        ];

        // Ajustar por marca (premium vs popular)
        $premiumBrands = ['tesla', 'mercedes', 'mercedes-benz', 'bmw', 'audi', 'volvo', 'jaguar', 'porsche'];
        $popularBrands = ['chevrolet', 'renault', 'fiat', 'hyundai', 'kia'];
        
        $multiplier = 1.0;
        if (in_array($make, $premiumBrands)) {
            $multiplier = 1.6; // El√©tricos premium s√£o mais caros
        } elseif (in_array($make, $popularBrands)) {
            $multiplier = 0.8;
        }

        $min = (int)($baseCosts[$revision]['min'] * $multiplier);
        $max = (int)($baseCosts[$revision]['max'] * $multiplier);

        return "R$ {$min} - R$ {$max}";
    }
}