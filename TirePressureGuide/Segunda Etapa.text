# üìã **ESPECIFICA√á√ÉO COMPLETA - ETAPA 2 DO TIREPRESSUREGUIDE**

## **üéØ CONTEXTO ATUAL DO PROJETO**

### **üìä Estado Atual:**
- ‚úÖ **Primeira Etapa CONCLU√çDA** com 99.8% de sucesso
- ‚úÖ **1926 artigos gerados** (965 ve√≠culos √∫nicos √ó 2 templates)
- ‚úÖ **Template "ideal":** 963 artigos (press√£o ideal dos pneus)
- ‚úÖ **Template "calibration":** 963 artigos (como calibrar pneus)
- üîÑ **PR√ìXIMO:** Segunda Etapa dividida em 2 fases

### **üìã ESTRUTURA DOS ARTIGOS:**
Cada `TirePressureArticle` cont√©m:
- `vehicle_data` - Dados t√©cnicos estruturados (**PRECISA CORRE√á√ÉO PRIMEIRO**)
- `article_content` - Conte√∫do base gerado (**MANTER INTACTO**)
- `sections_*` - 6 se√ß√µes para refinamento (**NOSSA RESPONSABILIDADE**)

---

## **üöÄ ETAPA 2: DIVIDIDA EM 2 FASES SEQUENCIAIS**

### **üìã FASE 1: CORRE√á√ÉO DO `vehicle_data` (PRIMEIRO)**

**OBJETIVO:** Padronizar `vehicle_data` ID√äNTICO para os 2 artigos de cada ve√≠culo

#### **üí° ESTRAT√âGIA OTIMIZADA:**
Como cada ve√≠culo gera 2 artigos (ideal + calibration) com **`vehicle_data` id√™ntico**, podemos:
- ‚úÖ **Processar 1 ve√≠culo** = **corrigir 2 artigos** simultaneamente
- ‚úÖ **965 execu√ß√µes** = **1926 artigos** corrigidos
- ‚úÖ **Economia de 50%** no tempo e chamadas API

#### **üîç IDENTIFICA√á√ÉO POR VE√çCULO:**
```php
// Buscar AMBOS os artigos do mesmo ve√≠culo:
$articles = TirePressureArticle::where('vehicle_data.make', 'Fiat')
    ->where('vehicle_data.model', '500e') 
    ->where('vehicle_data.year', 2023)
    ->get();

// Resultado: 2 artigos com vehicle_data ID√äNTICO
// - slug: "pressao-pneus-fiat-500e-2023" (template: ideal)
// - slug: "como-calibrar-pneus-fiat-500e-2023" (template: calibration)
```

#### **‚ö° PROCESSAMENTO SIMULT√ÇNEO:**
```php
// Corrigir vehicle_data UMA VEZ, aplicar nos DOIS artigos:
$correctedVehicleData = $this->claudeHaikuService->correctVehicleData($baseVehicleData);

foreach ($articles as $article) {
    $article->vehicle_data = $correctedVehicleData;
    $article->vehicle_data_corrected_at = now();
    $article->vehicle_data_version = 'v2.1';
    $article->save();
}
```

#### **ü§ñ Configura√ß√£o Claude para `vehicle_data`:**
```php
'model' => 'claude-3-haiku-20240307',  // PERFEITO para dados estruturados
'max_tokens' => 1500,                  // Suficiente para JSON
'temperature' => 0.1,                  // M√°xima consist√™ncia
'timeout' => 30,                       // R√°pido
'rate_limit' => 'every_180_seconds'    // 3 minutos (mais conservador)
```

#### **üí∞ Estimativas Fase 1 (OTIMIZADA):**
- **Ve√≠culos √∫nicos:** 965 (n√£o 1926!)
- **Chamadas Claude:** 965 (economia de 50%)
- **Custo por ve√≠culo:** ~$0.003 USD
- **Total:** ~$3 USD (metade do estimado!)
- **Tempo:** 2 dias (965 √ó 3 min = 48 horas)
- **Artigos corrigidos:** 1926 (2 por ve√≠culo)

#### **üîß Corre√ß√µes no `vehicle_data`:**
```php
// Campos a serem padronizados/corrigidos:
'vehicle_full_name' => 'Fiat 500e 2023',           // Gerado
'category_normalized' => 'Carros El√©tricos',       // Normalizado
'pressure_display' => 'Dianteiros: 34 PSI / Traseiros: 32 PSI',
'empty_pressure_display' => '32/30 PSI',
'loaded_pressure_display' => '36/34 PSI',
'is_premium' => true,                               // Detectado
'has_tpms' => true,                                // Calculado
'vehicle_segment' => 'B',                          // Classificado
'vehicle_type' => 'car'                            // Padronizado
```

### **üìã FASE 2: REFINAMENTO DAS SE√á√ïES (DEPOIS)**

**OBJETIVO:** Refinar 6 se√ß√µes usando `vehicle_data` corrigido

#### **ü§ñ Configura√ß√£o Claude para Se√ß√µes:**
```php
'model' => 'claude-3-5-sonnet-20240620',  // QUALIDADE PREMIUM
'max_tokens' => 4000,                      // Todas as 6 se√ß√µes
'temperature' => 0.3,                      // Criatividade controlada
'timeout' => 45,                           // 45 segundos
'rate_limit' => 'every_60_seconds'         // 1 request/minuto
```

#### **üí∞ Estimativas Fase 2:**
- **Custo por artigo:** ~$0.04 USD
- **Total 1926 artigos:** ~$77 USD
- **Tempo:** 32 dias (schedule a cada 2 min)
- **Model:** Claude 3.5 Sonnet (qualidade premium para conte√∫do)

---

## **üìù AS 6 SE√á√ïES A SEREM REFINADAS**

### **üéØ Se√ß√µes que Claude deve gerar:**

1. **`sections_intro`** - Introdu√ß√£o envolvente e espec√≠fica
2. **`sections_pressure_table`** - Tabela t√©cnica otimizada  
3. **`sections_how_to_calibrate`** - Instru√ß√µes passo-a-passo
4. **`sections_middle_content`** - Dicas, avisos, manuten√ß√£o
5. **`sections_faq`** - FAQ personalizada para o ve√≠culo
6. **`sections_conclusion`** - Conclus√£o com call-to-action

### **üîÑ DIFERENCIA√á√ÉO POR TEMPLATE:**

#### **Template "ideal" (Press√£o Ideal):**
- **Foco:** Especifica√ß√µes t√©cnicas, tabelas detalhadas, benef√≠cios
- **Intro:** "Press√£o ideal do {vehicle_full_name}"
- **FAQ:** "Qual a press√£o ideal?", "Por que essa press√£o?"

#### **Template "calibration" (Como Calibrar):**
- **Foco:** Procedimentos pr√°ticos, passo-a-passo, equipamentos
- **Intro:** "Como calibrar {vehicle_full_name}"
- **FAQ:** "Como calibrar?", "Que equipamento usar?"

---

## **üèóÔ∏è ARQUIVOS PARA IMPLEMENTAR - FASE 1 (PRIMEIRO)**

### **1. SCHEDULE PARA CORRE√á√ÉO `vehicle_data` (OTIMIZADO):**
```
Src/ContentGeneration/TirePressureGuide/Infrastructure/Console/Commands/Schedules/
‚îî‚îÄ‚îÄ VehicleDataCorrectionSchedule.php
```

**Especifica√ß√µes:**
- **Frequ√™ncia:** A cada 3 minutos
- **Processamento:** 1 ve√≠culo (2 artigos) por execu√ß√£o
- **Rate limiting:** 180 segundos entre chamadas Claude
- **Model:** Claude 3 Haiku
- **Estimativa:** 965 ve√≠culos = 2 dias total
- **Economia:** 50% menos chamadas API

**L√≥gica de sele√ß√£o otimizada:**
```php
// Buscar pr√≥ximo ve√≠culo √∫nico que precisa corre√ß√£o:
$firstArticle = TirePressureArticle::whereNull('vehicle_data_version')
    ->orWhere('vehicle_data_version', '!=', 'v2.1')
    ->orderBy('created_at', 'asc')
    ->first();

if ($firstArticle) {
    // Buscar AMBOS os artigos do mesmo ve√≠culo:
    $vehicleArticles = TirePressureArticle::where('vehicle_data.make', $firstArticle->vehicle_data['make'])
        ->where('vehicle_data.model', $firstArticle->vehicle_data['model'])
        ->where('vehicle_data.year', $firstArticle->vehicle_data['year'])
        ->get();
    
    // Processar os 2 artigos simultaneamente
}
```

### **2. SERVICE PARA CORRE√á√ÉO:**
```
Src/ContentGeneration/TirePressureGuide/Application/Services/
‚îî‚îÄ‚îÄ VehicleDataCorrectionService.php
```

**Responsabilidades:**
- Construir prompt para corre√ß√£o de dados estruturados
- Chamar Claude 3 Haiku com configura√ß√µes otimizadas
- Parsear resposta JSON corrigida
- Aplicar valida√ß√µes b√°sicas
- Salvar `vehicle_data` corrigido com flag de controle

### **3. COMMAND MANUAL PARA `vehicle_data`:**
```
Src/ContentGeneration/TirePressureGuide/Infrastructure/Console/Commands/
‚îî‚îÄ‚îÄ CorrectVehicleDataCommand.php
```

**Op√ß√µes:**
```bash
php artisan tire-pressure-guide:correct-vehicle-data 
    --make=Toyota               # Filtrar por marca
    --limit=50                  # N√∫mero m√°ximo
    --dry-run                   # Preview sem executar
    --force                     # For√ßar re-corre√ß√£o
```

### **4. CAMPOS DE CONTROLE PARA `vehicle_data`:**
```php
// Adicionar na TirePressureArticle:
'vehicle_data_corrected_at' => 'datetime',     // Quando foi corrigido
'vehicle_data_version' => 'string',            // Vers√£o da corre√ß√£o (v2.1)
```

---

## **üèóÔ∏è ARQUIVOS PARA IMPLEMENTAR - FASE 2 (DEPOIS)**

### **1. SCHEDULE PARA REFINAMENTO SE√á√ïES:**
```
Src/ContentGeneration/TirePressureGuide/Infrastructure/Console/Commands/Schedules/
‚îî‚îÄ‚îÄ TirePressureRefinementSchedule.php
```

**Especifica√ß√µes:**
- **Frequ√™ncia:** A cada 2 minutos
- **Processamento:** 1 artigo por execu√ß√£o
- **Rate limiting:** 60 segundos entre chamadas Claude
- **Model:** Claude 3.5 Sonnet (qualidade premium)
- **Estimativa:** 60 artigos/dia = 32 dias total
- **Prerequisito:** `vehicle_data_version = 'v2.1'`

### **2. SERVICE DE REFINAMENTO:**
```
Src/ContentGeneration/TirePressureGuide/Application/Services/
‚îî‚îÄ‚îÄ CompleteSectionRefinementService.php
```

**Responsabilidades:**
- Construir prompt baseado em `vehicle_data` + `template_type`
- Chamar Claude API com configura√ß√µes otimizadas
- Parsear resposta e extrair as 6 se√ß√µes
- Salvar todas as se√ß√µes de uma vez
- Marcar artigo como refinado

### **3. COMMAND MANUAL DE APOIO:**
```
Src/ContentGeneration/TirePressureGuide/Infrastructure/Console/Commands/
‚îî‚îÄ‚îÄ RefineArticleSectionsCommand.php
```

**Op√ß√µes:**
```bash
php artisan tire-pressure-guide:refine-sections 
    --template=ideal             # Filtrar por template
    --limit=50                   # N√∫mero m√°ximo
    --make=Toyota               # Filtrar por marca
    --dry-run                   # Preview sem executar
    --force                     # For√ßar re-refinamento
```

---

## **‚öôÔ∏è IMPLEMENTA√á√ÉO T√âCNICA - FASE 1**

### **üîí SISTEMA DE CONTROLE PARA `vehicle_data`:**

#### **L√≥gica de sele√ß√£o otimizada:**
```php
// Buscar pr√≥ximo ve√≠culo √∫nico que precisa corre√ß√£o:
$vehicleGroup = TirePressureArticle::select('vehicle_data.make', 'vehicle_data.model', 'vehicle_data.year')
    ->whereNull('vehicle_data_version')
    ->orWhere('vehicle_data_version', '!=', 'v2.1')
    ->groupBy(['vehicle_data.make', 'vehicle_data.model', 'vehicle_data.year'])
    ->orderBy('created_at', 'asc')
    ->first();

if ($vehicleGroup) {
    // Buscar AMBOS os artigos do mesmo ve√≠culo:
    $vehicleArticles = TirePressureArticle::where('vehicle_data.make', $vehicleGroup['make'])
        ->where('vehicle_data.model', $vehicleGroup['model'])
        ->where('vehicle_data.year', $vehicleGroup['year'])
        ->get(); // Resultado: 2 artigos (ideal + calibration)
}
```

#### **M√©todo de corre√ß√£o simult√¢nea:**
```php
public function correctVehicleDataForBothArticles(array $vehicleArticles): bool
{
    // Pegar vehicle_data de qualquer um (s√£o id√™nticos)
    $baseVehicleData = $vehicleArticles[0]->vehicle_data;
    
    // UMA chamada Claude para corrigir
    $correctedData = $this->claudeHaikuService->correctStructuredData($baseVehicleData);
    
    if ($correctedData) {
        // Aplicar nos DOIS artigos
        foreach ($vehicleArticles as $article) {
            $article->vehicle_data = $correctedData;
            $article->vehicle_data_corrected_at = now();
            $article->vehicle_data_version = 'v2.1';
            $article->save();
        }
        return true;
    }
    
    return false;
}
```

### **üéØ PROMPT PARA CLAUDE HAIKU:**

```php
$prompt = "
TAREFA: Corrigir e padronizar dados estruturados de ve√≠culo.

DADOS ATUAIS:
" . json_encode($this->vehicle_data, JSON_PRETTY_PRINT) . "

CORRE√á√ïES NECESS√ÅRIAS:
1. Gerar 'vehicle_full_name' = 'MARCA MODELO ANO'
2. Normalizar 'category_normalized' (Sedans, SUVs, Carros El√©tricos, etc)
3. Criar 'pressure_display' = 'Dianteiros: X PSI / Traseiros: Y PSI'
4. Padronizar 'empty_pressure_display' = 'X/Y PSI'
5. Padronizar 'loaded_pressure_display' = 'X/Y PSI'
6. Definir 'is_premium' (BMW, Mercedes, Audi = true)
7. Definir 'has_tpms' (ano >= 2019 = true)
8. Definir 'vehicle_segment' (A, B, C, D)
9. Padronizar 'vehicle_type' ('car' ou 'motorcycle')

RETORNE APENAS JSON CORRIGIDO:
";
```

---

## **‚öôÔ∏è IMPLEMENTA√á√ÉO T√âCNICA - FASE 2**

### **üîí SISTEMA DE CONTROLE PARA SE√á√ïES:**

#### **Prerequisito obrigat√≥rio:**
```php
// S√ì refinar se√ß√µes se vehicle_data foi corrigido:
$article = TirePressureArticle::whereNull('sections_last_refined_at')
    ->where('vehicle_data_version', 'v2.1')  // OBRIGAT√ìRIO!
    ->where('generation_status', 'generated')
    ->orderBy('created_at', 'asc')
    ->first();
```

#### **Campos de controle para se√ß√µes:**
```php
// Adicionar na TirePressureArticle:
'sections_last_refined_at' => 'datetime',    // Quando foi refinado
'sections_refinement_version' => 'string',   // Vers√£o do refinement (v2.0)
'refinement_status' => 'string',             // pending/processing/completed/failed
```

### **üéØ PROMPT STRUCTURE:**

#### **Template do prompt:**
```php
$prompt = "
DADOS DO VE√çCULO:
" . json_encode($article->vehicle_data, JSON_PRETTY_PRINT) . "

TEMPLATE: {$article->template_type}

CONTE√öDO DE REFER√äNCIA:
" . json_encode($article->article_content, JSON_PRETTY_PRINT) . "

TAREFA: Gere 6 se√ß√µes refinadas espec√≠ficas para este ve√≠culo:

1. sections_intro - Introdu√ß√£o envolvente
2. sections_pressure_table - Tabela t√©cnica  
3. sections_how_to_calibrate - Instru√ß√µes espec√≠ficas
4. sections_middle_content - Dicas e avisos
5. sections_faq - FAQ personalizada
6. sections_conclusion - Conclus√£o motivacional

RETORNE APENAS JSON com as 6 se√ß√µes:
";
```

### **üîß FLUXO DE PROCESSAMENTO:**

```php
// Pseudoc√≥digo do fluxo:
1. $article = getNextArticleForRefinement()
2. $article->markAsProcessing()
3. $prompt = buildPrompt($article->vehicle_data, $article->template_type)
4. $response = claudeAPI->refine($prompt)
5. $sections = parseResponse($response)
6. $article->updateAllSections($sections)
7. $article->markAsRefinedComplete()
```

---

## **üìä SISTEMA DE QUALIDADE E VALIDA√á√ÉO**

### **üéØ VALIDA√á√ïES AUTOM√ÅTICAS:**

#### **Ap√≥s refinamento:**
```php
// Verificar se todas as se√ß√µes foram preenchidas
$requiredSections = ['intro', 'pressure_table', 'how_to_calibrate', 'middle_content', 'faq', 'conclusion'];
$completeSections = 0;

foreach ($requiredSections as $section) {
    if (!empty($article->{"sections_$section"})) {
        $completeSections++;
    }
}

if ($completeSections === 6) {
    $article->refinement_status = 'completed';
    $article->sections_refinement_version = 'v2.0';
} else {
    $article->refinement_status = 'failed';
    // Agendar para retry
}
```

#### **C√°lculo de score:**
```php
$qualityScore = 0;
foreach ($requiredSections as $section) {
    $content = $article->{"sections_$section"};
    if (!empty($content)) {
        $sectionScore = calculateSectionScore($content, $section);
        $qualityScore += $sectionScore;
    }
}
$overallScore = $qualityScore / 6; // Score m√©dio
```

---

## **‚ö° SCHEDULE CONFIGURATION**

### **üîÑ Schedule Principal:**

```php
class TirePressureRefinementSchedule
{
    public function __invoke(Schedule $schedule): void
    {
        $schedule->call(function () {
            
            // ATOMIC LOCK - evita concorr√™ncia
            $lockKey = 'tire_pressure_refinement_v2';
            if (!Cache::lock($lockKey, 180)->get()) {
                return; // J√° est√° executando
            }
            
            try {
                $this->processSingleArticle();
            } finally {
                Cache::lock($lockKey, 180)->release();
            }
            
        })
        ->everyTwoMinutes()                    // SEGURO: 2 min entre execu√ß√µes
        ->name('tire-pressure-refinement-v2')
        ->withoutOverlapping(180);             // 3 min sem sobreposi√ß√£o
    }
    
    private function processSingleArticle(): void
    {
        $service = app(CompleteSectionRefinementService::class);
        
        // Buscar pr√≥ximo artigo
        $article = TirePressureArticle::getNextForRefinement();
        
        if ($article) {
            $success = $service->refineAllSections($article);
            
            Log::info("Artigo refinado", [
                'article_id' => $article->_id,
                'vehicle' => $article->vehicle_data['vehicle_full_name'] ?? 'N/A',
                'template' => $article->template_type,
                'success' => $success
            ]);
        }
    }
}
```

---

## **üìà CRONOGRAMA COMPLETO DAS 2 FASES**

### **‚è±Ô∏è FASE 1 - Corre√ß√£o `vehicle_data` (OTIMIZADA):**

| M√©trica | Valor |
|---------|-------|
| **Ve√≠culos √∫nicos** | 965 |
| **Artigos totais** | 1926 (2 por ve√≠culo) |
| **Chamadas Claude** | 965 (economia de 50%!) |
| **Frequ√™ncia do schedule** | A cada 3 minutos |
| **Ve√≠culos por hora** | ~20 |
| **Ve√≠culos por dia** | ~480 |
| **Tempo total estimado** | 2 dias (n√£o 4!) |
| **Model Claude** | 3 Haiku |
| **Custo total** | ~$3 USD (n√£o $6!) |

### **‚è±Ô∏è FASE 2 - Refinamento Se√ß√µes (INALTERADA):**

| M√©trica | Valor |
|---------|-------|
| **Total de artigos** | 1926 (com vehicle_data corrigido) |
| **Frequ√™ncia do schedule** | A cada 2 minutos |
| **Artigos por hora** | ~30 |
| **Artigos por dia** | ~60 (com rate limiting) |
| **Tempo total estimado** | 32 dias |
| **Model Claude** | 3.5 Sonnet |
| **Custo total** | ~$77 USD |

### **üìä CRONOGRAMA TOTAL OTIMIZADO:**
- **Fase 1:** 2 dias (corre√ß√£o dados - OTIMIZADA!)
- **Fase 2:** 32 dias (refinamento se√ß√µes)
- **Total:** 34 dias (n√£o 36!)
- **Custo total:** ~$80 USD ($3 + $77)

---

## **üîç MONITORAMENTO E LOGS**

### **üìä M√©tricas a acompanhar:**

```php
// Estat√≠sticas em tempo real:
- Artigos processados hoje
- Artigos pendentes
- Taxa de sucesso
- Tempo m√©dio por artigo
- Erros recentes
- Estimativa de conclus√£o
```

### **üö® Alertas autom√°ticos:**

```php
// Condi√ß√µes de alerta:
- Taxa de erro > 10%
- Artigos travados > 2 horas
- Rate limit atingido frequentemente
- Fila muito grande (> 100 artigos)
```

---

## **üéØ PR√ìXIMOS PASSOS - IMPLEMENTA√á√ÉO EM FASES**

### **üìã FASE 1 - Checklist (PRIMEIRO):**

1. ‚úÖ **Implementar VehicleDataCorrectionSchedule**
   - Schedule a cada 3 minutos
   - Lock at√¥mico para evitar concorr√™ncia
   - Processamento de 1 artigo por vez

2. ‚úÖ **Criar VehicleDataCorrectionService**
   - M√©todo `correctVehicleData()`
   - Prompt builder para Claude 3 Haiku
   - Parser de resposta JSON
   - Rate limiting a cada 3 minutos

3. ‚úÖ **Adicionar campos de controle na Model**
   - `vehicle_data_corrected_at`
   - `vehicle_data_version` (v2.1)

4. ‚úÖ **Implementar CorrectVehicleDataCommand**
   - Command manual para teste e recovery
   - Op√ß√µes de filtro e dry-run

5. ‚úÖ **Sistema de valida√ß√£o b√°sica**
   - Verifica√ß√£o se dados foram padronizados
   - Flag de controle para evitar reprocessamento

### **üìã FASE 2 - Checklist (DEPOIS DA FASE 1):**

1. ‚úÖ **Implementar TirePressureRefinementSchedule**
   - Schedule a cada 2 minutos
   - **Prerequisito:** `vehicle_data_version = 'v2.1'`
   - Processamento de 1 artigo por vez

2. ‚úÖ **Criar CompleteSectionRefinementService**
   - M√©todo `refineAllSections()`
   - Prompt builder baseado em `vehicle_data` corrigido + `template_type`
   - Parser de resposta JSON
   - Rate limiting a cada 60 segundos

3. ‚úÖ **Adicionar campos de controle para se√ß√µes**
   - `sections_last_refined_at`
   - `sections_refinement_version` (v2.0)
   - `refinement_status`

4. ‚úÖ **Implementar RefineArticleSectionsCommand**
   - Command manual para teste e recovery
   - Op√ß√µes de filtro e dry-run

5. ‚úÖ **Sistema de valida√ß√£o de qualidade**
   - Verifica√ß√£o autom√°tica das 6 se√ß√µes
   - C√°lculo de score de qualidade
   - Recovery autom√°tico para falhas

### **üéØ Resultado Final Esperado:**

**AP√ìS FASE 1:**
- **1926 artigos** com **`vehicle_data` padronizado e corrigido**
- **Dados estruturados** consistentes e enriquecidos
- **Flags de controle** (`vehicle_data_version = 'v2.1'`)
- **Base s√≥lida** para refinamento das se√ß√µes

**AP√ìS FASE 2:**
- **1926 artigos** com **6 se√ß√µes refinadas** cada
- **Conte√∫do espec√≠fico** por ve√≠culo e template
- **Qualidade premium** via Claude 3.5 Sonnet
- **Sistema robusto** com recovery autom√°tico
- **Monitoramento completo** de progresso
- **Prontos para `PublishTempTirePressureArticlesCommand`**

---

## **üí° INFORMA√á√ïES IMPORTANTES PARA O PR√ìXIMO CHAT**

### **üîë Pontos Cr√≠ticos:**

1. **PRIMEIRA:** Corrigir `vehicle_data` com Claude 3 Haiku
2. **DEPOIS:** Refinar se√ß√µes com Claude 3.5 Sonnet (usando dados corrigidos)
3. **NUNCA modificar `article_content`** - apenas se√ß√µes
4. **Prerequisito obrigat√≥rio:** `vehicle_data_version = 'v2.1'` para refinar se√ß√µes
5. **Rate limiting diferenciado:** 3 min (Haiku) vs 1 min (Sonnet)
6. **Valida√ß√£o sequencial** - Fase 2 s√≥ executa ap√≥s Fase 1
7. **Logs detalhados** para monitoramento de ambas as fases

### **üèóÔ∏è Arquitetura Existente:**
- Model `TirePressureArticle` j√° implementada
- Claude API service j√° existe (precisa configurar Haiku + Sonnet)
- Rate limiting j√° configurado (ajustar para 2 modelos)
- Sistema de backup j√° implementado

### **üéØ Objetivo Final:**
Criar sistema **100% automatizado** em **2 FASES SEQUENCIAIS**:
1. **Fase 1:** Padronizar `vehicle_data` (4 dias, Haiku, $6)
2. **Fase 2:** Refinar 6 se√ß√µes (32 dias, Sonnet, $77)

**Total: 34 dias, $80 USD, QUALIDADE PREMIUM!** üöÄ

**ECONOMIA ADICIONAL PELA OTIMIZA√á√ÉO:**
- ‚úÖ **Tempo:** 2 dias a menos (34 vs 36)
- ‚úÖ **Custo:** $3 a menos ($80 vs $83)  
- ‚úÖ **API calls:** 965 a menos (50% economia na Fase 1)
- ‚úÖ **Efici√™ncia:** M√°xima pelo processamento simult√¢neo